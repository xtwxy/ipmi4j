/*
 * This file is autogenerated.
 */
package org.anarres.ipmi.protocol.client.visitor;

import javax.annotation.Nonnull;

import org.anarres.ipmi.protocol.packet.ipmi.command.IpmiCommand;
import org.anarres.ipmi.protocol.packet.ipmi.command.IpmiRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.IpmiResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.chassis.ChassisControlRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.chassis.ChassisControlResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.chassis.GetChassisCapabilitiesRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.chassis.GetChassisCapabilitiesResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.chassis.GetChassisStatusRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.chassis.GetChassisStatusResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.chassis.GetSystemRestartCauseRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.chassis.GetSystemRestartCauseResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.fru.GetFRUInventoryAreaInfoRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.fru.GetFRUInventoryAreaInfoResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.fru.ReadFRUDataRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.fru.ReadFRUDataResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.global.GetDeviceIdRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.global.GetDeviceIdResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.lan.GetLANConfigurationParametersRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.lan.GetLANConfigurationParametersResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.ActivateSessionRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.ActivateSessionResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.CloseSessionRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.CloseSessionResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.GetChannelAccessRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.GetChannelAccessResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.GetChannelAuthenticationCapabilitiesRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.GetChannelAuthenticationCapabilitiesResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.GetChannelCipherSuitesRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.GetChannelCipherSuitesResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.GetChannelInfoRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.GetChannelInfoResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.GetSessionChallengeRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.GetSessionChallengeResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.SetSessionPrivilegeLevelRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.messaging.SetSessionPrivilegeLevelResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.sdr.GetSDRRepositoryInfoRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.sdr.GetSDRRepositoryInfoResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.sdr.GetSDRRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.sdr.GetSDRResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.sdr.ReserveSDRRepositoryRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.sdr.ReserveSDRRepositoryResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.sel.GetSELAllocationInfoRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.sel.GetSELAllocationInfoResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.sel.GetSELInfoRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.sel.GetSELInfoResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.sensor.GetSensorReadingRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.sensor.GetSensorReadingResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.sensor.GetSensorThresholdRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.sensor.GetSensorThresholdResponse;
import org.anarres.ipmi.protocol.packet.ipmi.command.sol.GetSOLConfigurationParametersRequest;
import org.anarres.ipmi.protocol.packet.ipmi.command.sol.GetSOLConfigurationParametersResponse;

/**
 * Autogenerated visitor handler for {@link IpmiCommand} subclasses.
 *
 * @author shevek
 */
public interface IpmiClientIpmiCommandHandler {


    public static class Adapter implements IpmiClientIpmiCommandHandler {

        public void handleDefault(@Nonnull IpmiHandlerContext context, @Nonnull IpmiCommand command) {
        }

        public void handleRequest(@Nonnull IpmiHandlerContext context, @Nonnull IpmiRequest request) {
            handleDefault(context, request);
        }

        public void handleResponse(@Nonnull IpmiHandlerContext context, @Nonnull IpmiResponse response) {
            handleDefault(context, response);
        }

        @Override
        public void handleGetDeviceIdRequest(IpmiHandlerContext context, GetDeviceIdRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetDeviceIdResponse(IpmiHandlerContext context, GetDeviceIdResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetChannelAuthenticationCapabilitiesRequest(IpmiHandlerContext context, GetChannelAuthenticationCapabilitiesRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetChannelAuthenticationCapabilitiesResponse(IpmiHandlerContext context, GetChannelAuthenticationCapabilitiesResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleSetSessionPrivilegeLevelRequest(IpmiHandlerContext context, SetSessionPrivilegeLevelRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleSetSessionPrivilegeLevelResponse(IpmiHandlerContext context, SetSessionPrivilegeLevelResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleCloseSessionRequest(IpmiHandlerContext context, CloseSessionRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleCloseSessionResponse(IpmiHandlerContext context, CloseSessionResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetChannelAccessRequest(IpmiHandlerContext context, GetChannelAccessRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetChannelAccessResponse(IpmiHandlerContext context, GetChannelAccessResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetChannelInfoRequest(IpmiHandlerContext context, GetChannelInfoRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetChannelInfoResponse(IpmiHandlerContext context, GetChannelInfoResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetChannelCipherSuitesRequest(IpmiHandlerContext context, GetChannelCipherSuitesRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetChannelCipherSuitesResponse(IpmiHandlerContext context, GetChannelCipherSuitesResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetChassisCapabilitiesRequest(IpmiHandlerContext context, GetChassisCapabilitiesRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetChassisCapabilitiesResponse(IpmiHandlerContext context, GetChassisCapabilitiesResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetChassisStatusRequest(IpmiHandlerContext context, GetChassisStatusRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetChassisStatusResponse(IpmiHandlerContext context, GetChassisStatusResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleChassisControlRequest(IpmiHandlerContext context, ChassisControlRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleChassisControlResponse(IpmiHandlerContext context, ChassisControlResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetSystemRestartCauseRequest(IpmiHandlerContext context, GetSystemRestartCauseRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetSystemRestartCauseResponse(IpmiHandlerContext context, GetSystemRestartCauseResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetSensorThresholdRequest(IpmiHandlerContext context, GetSensorThresholdRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetSensorThresholdResponse(IpmiHandlerContext context, GetSensorThresholdResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetSensorReadingRequest(IpmiHandlerContext context, GetSensorReadingRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetSensorReadingResponse(IpmiHandlerContext context, GetSensorReadingResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetFRUInventoryAreaInfoRequest(IpmiHandlerContext context, GetFRUInventoryAreaInfoRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetFRUInventoryAreaInfoResponse(IpmiHandlerContext context, GetFRUInventoryAreaInfoResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleReadFRUDataRequest(IpmiHandlerContext context, ReadFRUDataRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleReadFRUDataResponse(IpmiHandlerContext context, ReadFRUDataResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetSDRRepositoryInfoRequest(IpmiHandlerContext context, GetSDRRepositoryInfoRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetSDRRepositoryInfoResponse(IpmiHandlerContext context, GetSDRRepositoryInfoResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleReserveSDRRepositoryRequest(IpmiHandlerContext context, ReserveSDRRepositoryRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleReserveSDRRepositoryResponse(IpmiHandlerContext context, ReserveSDRRepositoryResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetSDRRequest(IpmiHandlerContext context, GetSDRRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetSDRResponse(IpmiHandlerContext context, GetSDRResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetSELInfoRequest(IpmiHandlerContext context, GetSELInfoRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetSELInfoResponse(IpmiHandlerContext context, GetSELInfoResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetSELAllocationInfoRequest(IpmiHandlerContext context, GetSELAllocationInfoRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetSELAllocationInfoResponse(IpmiHandlerContext context, GetSELAllocationInfoResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetLANConfigurationParametersRequest(IpmiHandlerContext context, GetLANConfigurationParametersRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetLANConfigurationParametersResponse(IpmiHandlerContext context, GetLANConfigurationParametersResponse response) {
            handleResponse(context, response);
        }

        @Override
        public void handleGetSOLConfigurationParametersRequest(IpmiHandlerContext context, GetSOLConfigurationParametersRequest request) {
            handleRequest(context, request);
        }

        @Override
        public void handleGetSOLConfigurationParametersResponse(IpmiHandlerContext context, GetSOLConfigurationParametersResponse response) {
            handleResponse(context, response);
        }

		@Override
		public void handleGetSessionChallengeRequest(IpmiHandlerContext context,
				GetSessionChallengeRequest request) {
            handleRequest(context, request);
		}

		@Override
		public void handleGetSessionChallengeResponse(IpmiHandlerContext context,
				GetSessionChallengeResponse response) {
            handleResponse(context, response);
		}

		@Override
		public void handleActivateSessionRequest(IpmiHandlerContext context,
				ActivateSessionRequest request) {
			handleRequest(context, request);
		}

		@Override
		public void handleActivateSessionResponse(IpmiHandlerContext context,
				ActivateSessionResponse response) {
            handleResponse(context, response);
		}
    }

    public void handleGetDeviceIdRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetDeviceIdRequest request);

    public void handleGetDeviceIdResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetDeviceIdResponse response);

    public void handleGetChannelAuthenticationCapabilitiesRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetChannelAuthenticationCapabilitiesRequest request);

    public void handleGetChannelAuthenticationCapabilitiesResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetChannelAuthenticationCapabilitiesResponse response);

    public void handleSetSessionPrivilegeLevelRequest(@Nonnull IpmiHandlerContext context, @Nonnull SetSessionPrivilegeLevelRequest request);

    public void handleSetSessionPrivilegeLevelResponse(@Nonnull IpmiHandlerContext context, @Nonnull SetSessionPrivilegeLevelResponse response);

    public void handleCloseSessionRequest(@Nonnull IpmiHandlerContext context, @Nonnull CloseSessionRequest request);

    public void handleCloseSessionResponse(@Nonnull IpmiHandlerContext context, @Nonnull CloseSessionResponse response);

    public void handleGetChannelAccessRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetChannelAccessRequest request);

    public void handleGetChannelAccessResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetChannelAccessResponse response);

    public void handleGetChannelInfoRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetChannelInfoRequest request);

    public void handleGetChannelInfoResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetChannelInfoResponse response);

    public void handleGetChannelCipherSuitesRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetChannelCipherSuitesRequest request);

    public void handleGetChannelCipherSuitesResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetChannelCipherSuitesResponse response);

    public void handleGetChassisCapabilitiesRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetChassisCapabilitiesRequest request);

    public void handleGetChassisCapabilitiesResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetChassisCapabilitiesResponse response);

    public void handleGetChassisStatusRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetChassisStatusRequest request);

    public void handleGetChassisStatusResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetChassisStatusResponse response);

    public void handleChassisControlRequest(@Nonnull IpmiHandlerContext context, @Nonnull ChassisControlRequest request);

    public void handleChassisControlResponse(@Nonnull IpmiHandlerContext context, @Nonnull ChassisControlResponse response);

    public void handleGetSystemRestartCauseRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetSystemRestartCauseRequest request);

    public void handleGetSystemRestartCauseResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetSystemRestartCauseResponse response);

    public void handleGetSensorThresholdRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetSensorThresholdRequest request);

    public void handleGetSensorThresholdResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetSensorThresholdResponse response);

    public void handleGetSensorReadingRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetSensorReadingRequest request);

    public void handleGetSensorReadingResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetSensorReadingResponse response);

    public void handleGetFRUInventoryAreaInfoRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetFRUInventoryAreaInfoRequest request);

    public void handleGetFRUInventoryAreaInfoResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetFRUInventoryAreaInfoResponse response);

    public void handleReadFRUDataRequest(@Nonnull IpmiHandlerContext context, @Nonnull ReadFRUDataRequest request);

    public void handleReadFRUDataResponse(@Nonnull IpmiHandlerContext context, @Nonnull ReadFRUDataResponse response);

    public void handleGetSDRRepositoryInfoRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetSDRRepositoryInfoRequest request);

    public void handleGetSDRRepositoryInfoResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetSDRRepositoryInfoResponse response);

    public void handleReserveSDRRepositoryRequest(@Nonnull IpmiHandlerContext context, @Nonnull ReserveSDRRepositoryRequest request);

    public void handleReserveSDRRepositoryResponse(@Nonnull IpmiHandlerContext context, @Nonnull ReserveSDRRepositoryResponse response);

    public void handleGetSDRRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetSDRRequest request);

    public void handleGetSDRResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetSDRResponse response);

    public void handleGetSELInfoRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetSELInfoRequest request);

    public void handleGetSELInfoResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetSELInfoResponse response);

    public void handleGetSELAllocationInfoRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetSELAllocationInfoRequest request);

    public void handleGetSELAllocationInfoResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetSELAllocationInfoResponse response);

    public void handleGetLANConfigurationParametersRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetLANConfigurationParametersRequest request);

    public void handleGetLANConfigurationParametersResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetLANConfigurationParametersResponse response);

    public void handleGetSOLConfigurationParametersRequest(@Nonnull IpmiHandlerContext context, @Nonnull GetSOLConfigurationParametersRequest request);

    public void handleGetSOLConfigurationParametersResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetSOLConfigurationParametersResponse response);

	public void handleGetSessionChallengeRequest(@Nonnull IpmiHandlerContext context, GetSessionChallengeRequest request);

	public void handleGetSessionChallengeResponse(@Nonnull IpmiHandlerContext context, @Nonnull GetSessionChallengeResponse response);

	public void handleActivateSessionRequest(IpmiHandlerContext context, ActivateSessionRequest activateSessionRequest);

	public void handleActivateSessionResponse(IpmiHandlerContext context,
			ActivateSessionResponse activateSessionResponse);
}
